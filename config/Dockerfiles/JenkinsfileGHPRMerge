/**
 * CI Stage Linchpin Merge
 *
 * This is a declarative pipeline for the CI linchpin pipeline
 * that includes the building of images based on PRs
 *
 */

import groovy.json.JsonOutput

// Openshift project
openshiftProject = "continuous-infra"
topic = env.topic ?: 'org.centos.prod'
env.MSG_PROVIDER = 'fedora-fedmsg'

// Defaults for SCM operations
env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'develop'

def libraries = ['cico-pipeline': ['master',
                                   'https://github.com/CentOS/cico-pipeline-library.git'],
                 'ci-pipeline'  : ['master',
                                   'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])
}

properties([
  buildDiscarder(logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20')),
  [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
  [$class: 'org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty', triggers:[
    [
      $class: 'org.jenkinsci.plugins.ghprb.GhprbTrigger',
      orgslist: 'CentOS-PaaS-SIG',
      cron: 'H/5 * * * *',
      triggerPhrase: '.*\\[merge\\].*',
      onlyTriggerPhrase: true,
      useGitHubHooks: true,
      permitAll: true,
      autoCloseFailedPullRequests: false,
      displayBuildErrorsOnDownstreamBuilds: true,
      extensions: [
        [
          $class: 'org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus',
          commitStatusContext: 'Merge PR',
          showMatrixStatus: false,
          triggeredStatus: 'Starting job...',
          startedStatus: 'merging...',
        ]
      ]
    ]
  ]]
])

pipeline {
    agent none
    stages {
        stage("ci-linchpin-GHPR-merge") {
            steps {
                node('master') {
                    lock('merge-and-image-rebuild-lock') {
                        script {
                            // need this for ghprb plugin since it is really a post
                            // build step and it assumes the build is complete.
                            currentBuild.result = 'SUCCESS'
                        }
                        step([$class: 'GhprbPullRequestMerge', allowMergeWithoutTriggerPhrase: false, deleteOnMerge: false, disallowOwnCode: false, failOnNonMerge: false, mergeComment: ' ', onlyAdminsMerge: false])
                        script {
                            mTopic = "${topic}.ci.linchpin.pr_merge.queued"
                            mProperties = "topic=${topic}.ci.linchpin.pr_merge.queued\n" +
                                "ghprbActualCommit=${env.ghprbActualCommit}\n" +
                                "ghprbPullId=${env.ghprbPullId}\n" +
                                "ghprbPullAuthorLogin=${env.ghprbPullAuthorLogin}\n" +
                                "sha1=${env.sha1}"
                            mContent = [
                                "topic": "${topic}.ci.linchpin.pr_merge.queued",
                                "ghprbActualCommit": env.ghprbActualCommit,
                                "ghprbPullId": env.ghprbPullId,
                                "ghprbPullAuthorLogin": env.ghprbPullAuthorLogin,
                                "sha1": env.sha1
                            ]
                            mContentString = JsonOutput.toJson(mContent)
                            pipelineUtils.sendMessage(mTopic, mProperties, mContentString)
                        }
                        build job: 'ci-linchpin-merge',
                            parameters: [
                                    string(name: 'ghprbActualCommit',
                                           value: "${env.ghprbActualCommit}"),
                                    string(name: 'ghprbPullId',
                                           value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbGhRepository',
                                           value: "${env.ghprbGhRepository}"),
                                    string(name: 'ghprbPullAuthorLogin',
                                           value: "${env.ghprbPullAuthorLogin}"),
                                    string(name: 'sha1',
                                           value: "${env.sha1}")
                            ],
                            wait: true
                    }
                }
            }
        }
    }
}
