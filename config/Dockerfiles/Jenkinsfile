import com.cloudbees.plugins.credentials.Credentials

env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'develop'
env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
env.ghprbPullId = env.ghprbPullId ?: ''

env.TARGET_BRANCH = env.TARGET_BRANCH ?: 'develop'

// Needed for podTemplate()
env.STABLE_TAG = env.STABLE_TAG ?: 'stable'

DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'
// If LINCHPIN_PROVIDERS is defined in jenkins global
// environment this will limit the possible providers tested.
// if it's not defined you will get all the possible providers
// listed here.

LPROVIDERS = env.LINCHPIN_PROVIDERS ?: 'libvirt'
PPROVIDERS = LPROVIDERS.tokenize()

TEST_PROVIDERS = env.TEST_PROVIDERS ?: 'dummy duffy libvirt aws beaker openstack'
TPROVIDERS = TEST_PROVIDERS.tokenize()

env.PROVIDERS = TPROVIDERS.intersect( PPROVIDERS ).join(" ")

OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
OPENSHIFT_SERVICE_ACCOUNT = env.OPENSHIFT_SERVICE_ACCOUNT ?: 'jenkins'

// Execution ID for this run of the pipeline
executionID = UUID.randomUUID().toString()

// Pod name to use
podName = 'linchpin_container-' + executionID

def libraries = ['cico-pipeline': ['master',
                                   'https://github.com/CentOS/cico-pipeline-library.git'],
                 'ci-pipeline'  : ['master',
                                   'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])
}

properties(
    [
        buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '15', daysToKeepStr: '90', numToKeepStr: '30')),
        [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
        disableConcurrentBuilds(),
        parameters(
            [
                string(defaultValue: 'develop',
                       description: '',
                       name: 'ghprbActualCommit'),
                string(defaultValue: '',
                       description: '',
                       name: 'sha1'),
                string(defaultValue: '',
                       description: 'Pull Request Number',
                       name: 'ghprbPullId'),
                string(defaultValue: '',
                       description: 'Pull Request Author username',
                       name: 'ghprbPullAuthorLogin'),
                string(defaultValue: '',
                       description: 'Git Hub Repository',
                       name: 'ghprbGhRepository'),
                string(defaultValue: 'stable',
                       description: 'Tag for stable image',
                       name: 'STABLE_TAG'),
                string(description: 'Providers to be tested',
                       name: 'TEST_PROVIDERS')
            ]
        ),
    ]
)



//
//def tasks = [:]
//
//
//def comboBuilder = { def dists ->
//    for ( d in dists ) {
//        dist = d
//        currentBuild.rawBuild.getAction( PodTemplateAction.class )?.stack?.clear()
//        tasks[dist] = generateTasks(dist, podName)
//    }
//}


def distros = ['centos7', 'fedora27', 'fedora28']
def builders = [:]
def pods = [:]


def getTasks(distro) {

    def podName = generatePodName(distro)
    def podnm = podName
    def d = distro

    return {
        node(podnm) {
            stage('say hello') {
                sh "hello " + d
            }
        }
    }
}


def generatePodName(distro) {
        return "linchpin_" + distro + "-" + executionID
}

def generatePod(distro, podname) {
    return {
        stage ('create pods') {
            podTemplate(name: podname,
                        label: podname,
                        cloud: 'openshift',
                        serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
                        idleminutes: 0,
                        namespace: OPENSHIFT_NAMESPACE,

                containers: [
                  containerTemplate(name: 'jnlp',
                    alwaysPullImage: true,
                    image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + "/" + distro + ":" + STABLE_TAG,
                    ttyEnabled: false,
                    command: '/usr/sbin/init',
                    privileged: true,
    //                oci_kvm_hook: 'allowed',
                    workingDir: '/workdir'),
                ],
                volumes: [
                  hostPathVolume(mountPath: '/var/run/libvirt', hostPath: '/var/run/libvirt'),
                  emptyDirVolume(memory: false, mountPath: '/sys/class/net')
                ]
            )
            {
                stage('launch-container') {
                    node(podname) {
                        container(distro) {
                            println "hello " + distro
                            ansiColor('xterm') {
                                timestamps {
                                    // We need to set env.HOME because the openshift slave image
                                    // forces this to /home/jenkins and then ~ expands to that
                                    // even though id == "root"
                                    // See https://github.com/openshift/jenkins/blob/master/slave-base/Dockerfile#L5
                                    //
                                    // Even the kubernetes plugin will create a pod with containers
                                    // whose $HOME env var will be its workingDir
                                    // See https://github.com/jenkinsci/kubernetes-plugin/blob/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java#L311
                                    //
                                    env.HOME = "/root"
                                    //
                                    try {
                                      // Prepare our environment
                                        stage("prepare-environment") {
                                            deleteDir()
                                            pipelineUtils.setDefaultEnvVars()

                                            if (env.ghprbActualCommit != null && env.ghprbActualCommit != "develop") {
                                                currentBuild.description = "<a href=\"https://github.com/${env.ghprbGhRepository}/pull/${env.ghprbPullId}\">PR #${env.ghprbPullId} (${env.ghprbPullAuthorLogin})</a>"
                                            }
                                        }
                                    } catch (e) {
                                        // Set build result
                                        currentBuild.result = 'FAILURE'

                                        // Report the exception
                                        echo e.getMessage()

                                        // Throw the error
                                        throw e

                                    } finally {
                                        pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)

                                        // Archive our artifacts
                                        step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/*_logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/job.props,**/job.props.groovy,**/*.example', fingerprint: true])

                                        // Set our message topic, properties, and content
                                        //messageFields = pipelineUtils.setMessageFields("complete")

                                        // Send message org.foo.bar.complete on fedmsg
                                        //pipelineUtils.sendMessageWithAudit(messageFields['properties'], messageFields['content'], msgAuditFile, fedmsgRetryCount)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


for (d in distros) {

    def dist = d
    def podName = generatePodName(dist)

    pods[dist] = generatePod(dist, podName)
}

parallel pods

//            workingDir: '/workdir'),
//        ],
//        volumes: [
//          hostPathVolume(mountPath: '/var/run/libvirt', hostPath: '/var/run/libvirt'),
//          emptyDirVolume(memory: false, mountPath: '/sys/class/net')
//        ]
//    )
//
//    {
//        sh "echo hello"
//    }
//  }, fedora27: {
//    // pod name to use
//    f27podname = 'linchpin_fedora27-' + executionID
//
//    podTemplate(name: f27podname,
//      label: f27podname,
//      cloud: 'openshift',
//      serviceaccount: OPENSHIFT_SERVICE_ACCOUNT,
//      idleminutes: 0,
//      namespace: OPENSHIFT_NAMESPACE,
//
//        containers: [
//          containerTemplate(name: 'jnlp',
//            alwaysPullImage: true,
//            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
//            ttyEnabled: false,
//            args: '${computer.jnlpmac} ${computer.name}',
//            command: '',
//            workingDir: '/workdir'),
//          containerTemplate(name: 'fedora27',
//            alwaysPullImage: true,
//            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/fedora27:' + FEDORA27_TAG,
//            ttyEnabled: false,
//            command: '/usr/sbin/init',
//            privileged: true,
//            workingDir: '/workdir'),
//        ],
//        volumes: [
//          hostPathVolume(mountPath: '/var/run/libvirt', hostPath: '/var/run/libvirt'),
//          emptyDirVolume(memory: false, mountPath: '/sys/class/net')
//        ]
//    )
//
//    {
//        sh "echo hello fedora27"
//    }
//  }
//}
//      stage('launch-container') {
//        node(c7podname) {
//
//          pipelineUtils.verifyPod(OPENSHIFT_NAMESPACE, c7podname)
//
//          container('centos7') {
//            ansiColor('xterm') {
//              timestamps {
//                // We need to set env.HOME because the openshift slave image
//                // forces this to /home/jenkins and then ~ expands to that
//                // even though id == "root"
//                // See https://github.com/openshift/jenkins/blob/master/slave-base/Dockerfile#L5
//                //
//                // Even the kubernetes plugin will create a pod with containers
//                // whose $HOME env var will be its workingDir
//                // See https://github.com/jenkinsci/kubernetes-plugin/blob/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java#L311
//                //
//                env.HOME = "/root"
//                //
//                try {
//                  // Prepare our environment
//                  stage("prepare-environment") {
//                    deleteDir()
//                    pipelineUtils.setDefaultEnvVars()
//
//                    if (env.ghprbActualCommit != null && env.ghprbActualCommit != "develop") {
//                      currentBuild.description = "<a href=\"https://github.com/${env.ghprbGhRepository}/pull/${env.ghprbPullId}\">PR #${env.ghprbPullId} (${env.ghprbPullAuthorLogin})</a>"
//                    }
//                    // Gather some info about the node we are running on for diagnostics
//                    dir('linchpin') {
//                      // Checkout our linchpin repo based on the value of env.ghprbActualCommit
//                      checkout([$class: 'GitSCM',
//                                branches: [[name: env.ghprbActualCommit]],
//                                doGenerateSubmoduleConfigurations: false,
//                                extensions                       : [],
//                                submoduleCfg                     : [],
//                                userRemoteConfigs                : [
//                                        [refspec:
//                                                 '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
//                                         url: "https://github.com/${env.ghprbGhRepository}"]
//                                ]
//                      ])
//                      sh """
//                        git clone https://github.com/CentOS-PaaS-SIG/duffy-ansible-module.git
//                      """
//                      def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
//                        com.cloudbees.plugins.credentials.Credentials.class
//                      );
//                      for (provider in PPROVIDERS) {
//                        def cf = creds.findResult { it.id == provider + '-key' ? it : null }
//                        if ( cf ) {
//                          println "found credential ${cf.id} filename:${cf.fileName}"
//                          withCredentials([file(credentialsId: provider + '-key', variable: 'FILEKEY')]) {
//                            sh """
//                                #!/bin/bash -x
//                                mkdir -p keys/
//                                cp ${FILEKEY} keys/${cf.fileName}
//                                chmod 0600 keys/${cf.fileName}
//                            """
//                          }
//                        }
//                      }
//                    }
//                  }
//                  stage('centos7-install') {
//                    dir('linchpin') {
//                      sh "./config/Dockerfiles/linchpin-install.sh"
//                    }
//                  }
//                  stage('centos7-test') {
//                    dir('linchpin') {
//                      env.distro = "centos7"
//                      sh "./config/Dockerfiles/linchpin-tests.sh"
//                    }
//                  }
//                } catch (e) {
//                    // Set build result
//                    currentBuild.result = 'FAILURE'
//
//                    // Report the exception
//                    echo e.getMessage()
//
//                    // Throw the error
//                    throw e
//
//                } finally {
//                    pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
//
//                    // Archive our artifacts
//                    step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/*_logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/job.props,**/job.props.groovy,**/*.example', fingerprint: true])
//
//                    // Set our message topic, properties, and content
//                    //messageFields = pipelineUtils.setMessageFields("complete")
//
//                    // Send message org.foo.bar.complete on fedmsg
//                    //pipelineUtils.sendMessageWithAudit(messageFields['properties'], messageFields['content'], msgAuditFile, fedmsgRetryCount)
//
//                }
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//
//  , fedora27: {
//    // pod name to use
//    f27podname = 'linchpin_fedora27-' + executionID
//
//    podTemplate(name: f27podname,
//      label: f27podname,
//      cloud: 'openshift',
//      serviceaccount: OPENSHIFT_SERVICE_ACCOUNT,
//      idleminutes: 0,
//      namespace: OPENSHIFT_NAMESPACE,
//
//        containers: [
//          containerTemplate(name: 'jnlp',
//            alwaysPullImage: true,
//            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
//            ttyEnabled: false,
//            args: '${computer.jnlpmac} ${computer.name}',
//            command: '',
//            workingDir: '/workdir'),
//          containerTemplate(name: 'fedora27',
//            alwaysPullImage: true,
//            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/fedora27:' + FEDORA27_TAG,
//            ttyEnabled: false,
//            command: '/usr/sbin/init',
//            privileged: true,
//            workingDir: '/workdir'),
//        ],
//        volumes: [
//          hostPathVolume(mountPath: '/var/run/libvirt', hostPath: '/var/run/libvirt'),
//          emptyDirVolume(memory: false, mountPath: '/sys/class/net')
//        ]
//    )
//
//    {
//      stage('launch-container') {
//        node(f27podname) {
//
//          sh "echo 'hello world'"
//          sh "sleep 180"
//          //pipelineUtils.verifyPod(OPENSHIFT_NAMESPACE, c7podname)
//
//          //container('fedora27') {
//          //  ansiColor('xterm') {
//          //    timestamps {
//          //       We need to set env.HOME because the openshift slave image
//          //       forces this to /home/jenkins and then ~ expands to that
//          //       even though id == "root"
//          //       See https://github.com/openshift/jenkins/blob/master/slave-base/Dockerfile#L5
//
//          //       Even the kubernetes plugin will create a pod with containers
//          //       whose $HOME env var will be its workingDir
//          //       See https://github.com/jenkinsci/kubernetes-plugin/blob/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java#L311
//
//          //      v.HOME = "/root"
//
//          //      try {
//          //        // Prepare our environment
//          //        stage("prepare-environment") {
//          //          deleteDir()
//
//          //          pipelineUtils.setDefaultEnvVars()
//
//          //          if (env.ghprbActualCommit != null && env.ghprbActualCommit != "develop") {
//          //            currentBuild.description = "<a href=\"https://github.com/${env.ghprbGhRepository}/pull/${env.ghprbPullId}\">PR #${env.ghprbPullId} (${env.ghprbPullAuthorLogin})</a>"
//          //          }
//          //          // Gather some info about the node we are running on for diagnostics
//          //          dir('linchpin') {
//          //            // Checkout our linchpin repo based on the value of env.ghprbActualCommit
//          //            checkout([$class: 'GitSCM',
//          //                      branches: [[name: env.ghprbActualCommit]],
//          //                      doGenerateSubmoduleConfigurations: false,
//          //                      extensions                       : [],
//          //                      submoduleCfg                     : [],
//          //                      userRemoteConfigs                : [
//          //                              [refspec:
//          //                                       '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
//          //                               url: "https://github.com/${env.ghprbGhRepository}"]
//          //                      ]
//          //            ])
//          //            sh """
//          //              git clone https://github.com/CentOS-PaaS-SIG/duffy-ansible-module.git
//          //            """
//          //            def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
//          //              com.cloudbees.plugins.credentials.Credentials.class
//          //            );
//          //            for (provider in PPROVIDERS) {
//          //              def cf = creds.findResult { it.id == provider + '-key' ? it : null }
//          //              if ( cf ) {
//          //                println "found credential ${cf.id} filename:${cf.fileName}"
//          //                withCredentials([file(credentialsId: provider + '-key', variable: 'FILEKEY')]) {
//          //                  sh """
//          //                      #!/bin/bash -x
//          //                      mkdir -p keys/
//          //                      cp ${FILEKEY} keys/${cf.fileName}
//          //                      chmod 0600 keys/${cf.fileName}
//          //                  """
//          //                }
//          //              }
//          //            }
//          //          }
//          //        }
//          //        stage('fedora27-install') {
//          //          dir('linchpin') {
//          //            sh "./config/Dockerfiles/linchpin-install.sh"
//          //          }
//          //        }
//          //        stage('fedora27-test') {
//          //          dir('linchpin') {
//          //            env.distro = "fedora27"
//          //            sh "./config/Dockerfiles/linchpin-tests.sh"
//          //          }
//          //        }
//          //      } catch (e) {
//          //          // Set build result
//          //          currentBuild.result = 'FAILURE'
//
//          //          // Report the exception
//          //          echo e.getMessage()
//
//          //          // Throw the error
//          //          throw e
//
//          //      } finally {
//          //          pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
//
//          //          // Archive our artifacts
//          //          step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/*_logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/job.props,**/job.props.groovy,**/*.example', fingerprint: true])
//
//          //          // Set our message topic, properties, and content
//          //          //messageFields = pipelineUtils.setMessageFields("complete")
//
//          //          // Send message org.foo.bar.complete on fedmsg
//          //          //pipelineUtils.sendMessageWithAudit(messageFields['properties'], messageFields['content'], msgAuditFile, fedmsgRetryCount)
//
//          //      }
//          //    }
//          //  }
//          //}
//        }
//      }
//    }
//  }
//}


